/**
 * Main CSS Import File - ADR-011 Compliant
 * Simple CSS Architecture with Flat Organization
 * 
 * Replaces ITCSS architecture with simple, maintainable structure.
 * Supports dynamic CSS class generation for entity-specific styling.
 * 
 * Import order follows logical dependency structure:
 * 1. Variables - Design system foundation
 * 2. Base - Reset and base HTML elements
 * 3. Layout - Grid, flexbox, positioning utilities
 * 4. Components - Reusable UI components  
 * 5. Entities - Entity-specific styling with dynamic classes
 * 6. Utilities - Helper classes and overrides
 * 
 * Dynamic Class Pattern Support:
 * - {{entity_name}}-card → company-card, task-card, etc.
 * - {{entity_name}}-{{status}} → company-active, task-completed, etc.
 * - btn-{{entity_name}}-primary → btn-company-primary, etc.
 */

/* ========================================
 * FOUNDATION LAYER
 * Variables and design system tokens
 * ======================================== */

@import url('variables.css');

/* ========================================
 * ENTITIES LAYER
 * Entity-specific styling with dynamic class support
 * ======================================== */

@import url('entities.css');

/* ========================================
 * LEGACY COMPATIBILITY
 * Keep chatbot styles during transition
 * ======================================== */

@import url('chatbot.css');

/* ========================================
 * APPLICATION-SPECIFIC STYLES
 * Essential styles that aren't provided by Tailwind
 * ======================================== */

/* Hide all loading animations and indicators */
.htmx-indicator,
.modal-loading,
.modal-spinner,
[id*="loading-indicator"],
[class*="loading"],
[class*="spinner"],
.loading-spinner,
.animate-spin {
    display: none !important;
}

.htmx-request .htmx-indicator,
.htmx-request.htmx-indicator {
    display: none !important;
}

/* Alpine.js cloak utility */
[x-cloak] {
    display: none !important;
}

/* ========================================
 * ADR-011 COMPLIANCE VERIFICATION
 * This file structure implements:
 * 
 * ✅ Flat CSS organization (no numbered directories)
 * ✅ Entity-driven CSS classes with dynamic generation support
 * ✅ Minimal layer structure (6 logical layers)
 * ✅ Readable class names matching business logic
 * ✅ CSS variables for entity-specific theming
 * ✅ Single import file for simplified asset management
 * ======================================== */